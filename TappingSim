local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Window = Rayfield:CreateWindow({
    Name = "DragonHub | By Toothless The Night Fury#9772",
    LoadingTitle = "DragonHub",
    LoadingSubtitle = "By Toothless The Night Fury#9772",
    ConfigurationSaving = {
        Enabled = true,
        FileName = "DragonHub",
    },
    KeySystem = true,
    KeySettings = {
	Title = "DragonHub",
	Subtitle = "Key System",
	Note = "Join the discord (https://discord.gg/KwyPcJQ9ma)",
	Key = "8HXCqS4h58xUg7IhfU0Rw6W9V8bLuj25mLx6fnizvfQIU8T93BmOW95r7CWab54QWSqfAAtX82SAX5zW0li7164a643ygrhR6Z2"
}
})


    -- Values

    _G.autoTap = true
    _G.autoHalloweenTap = true
    _G.autoRebirth = true
    _G.autoEgg = true
    _G.eventEgg = true
    _G.autoEventTwoEgg = true
    _G.autoHalloweenEgg = true
    _G.storageUpgrade = true
    _G.rebirthUpgrade = true
    _G.jumpUpgrade = true
    _G.gemUpgrade = true
    _G.claimRandomReward = true
    _G.ClaimRankReward = true
    _G.ClaimDailyReward = true
    _G.tripleTap = true
    _G.doubleLuckBoost = true
    _G.tripleLuckBoost = true
    _G.autoBoss = true

    -- Tabs

    local EventTab = Window:CreateTab("Event Menu")

    local ClickerTab = Window:CreateTab("Auto Clicker")

    local RebirthTab = Window:CreateTab("Rebirth Menu")

    local EggTab = Window:CreateTab("Egg Menu")

    local UpgradesTab = Window:CreateTab("Upgrades Menu")

    local RewardsTab = Window:CreateTab("Rewards Menu")

    local BoostTab = Window:CreateTab("Boost Menu")

    local PlayerTab = Window:CreateTab("Player Menu")

    local TeleportTab = Window:CreateTab("Teleport Menu")

    local MiscTab = Window:CreateTab("Misc Menu")

    -- Labels

    local Label = MiscTab:CreateLabel("Credits go to 709!")

    local Label = TeleportTab:CreateLabel("Credits go to 709!")

    -- Dropdown Menus

    local Dropdown = RebirthTab:CreateDropdown({
        Name = "Rebirth Amount",
        Options = {"1", "5", "10", "20", "100", "500", "4000", "13500", "32000", "62500", "108000", "171500", "256000", "346500", "500000", "1000000", "2000000", "1000000000", "1000000000000", "100000000000000"},
        CurrentOption = " ",
        Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            print(Value)
            rebirthAmount = Value
        end,
    })

    local Dropdown = EggTab:CreateDropdown({
        Name = "Choose Egg",
        Options = {"Starter","Wood Egg","Jungle Egg","Forest Egg","Bee Egg","Swamp Egg","Snow Egg","Desert Egg","Death Egg","Beach Egg","Mine Egg","Cloud Egg","Coral Egg","Dark Egg","Fire Egg","Underworld Egg","Molten Egg","Magma Egg","Blue Magma Egg","Purple Magma Egg","Yellow Magma Egg","Red Magma Egg","Holy Egg","Holy Wood Egg","Holy Bee Egg","Flora Egg","Flora Egg","Castle Egg","Candy Egg","Festival Egg","Japan Egg","Frost Alien Egg","Toxic Alien Egg","Scrapyard Egg","Blood Egg"},
        CurrentOption = " ",
        Flag = "Dropdown2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            print(Value)
            selectedEgg = Value
        end,
    })

    local Dropdown = EventTab:CreateDropdown({
        Name = "Choose Halloween Egg",
        Options = {"Halloween Egg","Orange Egg","Hallow Egg","Spooky Egg","Halloween Dominus Egg","Pumpkin Egg","Zombie Miner","Slime Pumpkin","Slime Ghost","Goblin","Slime Crystal","Ghoul Egg"},
        CurrentOption = " ",
        Flag = "Dropdown3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            print(Value)
            selectedEgg = Value
        end,
    })

    -- Sliders

    local SpeedSlider = PlayerTab:CreateSlider({
		Name = "Change Walkspeed",
		Range = {16, 1002},
		Increment = 1,
		Suffix = "walkspeed",
		CurrentValue = 16,
		Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
		end,
	})

    local JumpSlider = PlayerTab:CreateSlider({
		Name = "Change Jumppower",
		Range = {50, 750},
		Increment = 1,
		Suffix = "jumppower",
		CurrentValue = 50,
		Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
		end,
	})


    -- Toggles

    local autoTapToggle = ClickerTab:CreateToggle({
        Name = "Auto Tap",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoTap = Value
            autoTap()
        end,
    })

    local autoHalloweenTapToggle = ClickerTab:CreateToggle({
        Name = "Auto Tap Halloween",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoHalloweenTap = Value
            autoHalloweenTap()
        end,
    })

    local autoRebirthoggle = RebirthTab:CreateToggle({
        Name = "Auto Rebirth",
        CurrentValue = false,
        Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoRebirth = Value
            autoRebirth(rebirthAmount)
        end,
    })

    local autoBuyEggToggle = EggTab:CreateToggle({
        Name = "Auto Buy Egg",
        CurrentValue = false,
        Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoEgg = Value
            autoEgg(selectedEgg)
        end,
    })

    local autoUpgradeStorageToggle = UpgradesTab:CreateToggle({
        Name = "Auto Upgrade Storage",
        CurrentValue = false,
        Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.storageUpgrade = Value
            storageUpgrade()
        end,
    })

    local autoUpgradeRebirthToggle = UpgradesTab:CreateToggle({
        Name = "Auto Upgrade Rebirth Amount",
        CurrentValue = false,
        Flag = "Toggle6", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.rebirthUpgrade = Value
            rebirthUpgrade()
        end,
    })

    local autoUpgradeJumpToggle = UpgradesTab:CreateToggle({
        Name = "AAuto Upgrade Jump Amount",
        CurrentValue = false,
        Flag = "Toggle7", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.jumpUpgrade = Value
            jumpUpgrade()
        end,
    })

    local autoUpgradeGemToggle = UpgradesTab:CreateToggle({
        Name = "Auto Upgrade Gem Amount",
        CurrentValue = false,
        Flag = "Toggle8", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.gemUpgrade = Value
            gemUpgrade()
        end,
    })

    local autoClaimRandomRewardToggle = RewardsTab:CreateToggle({
        Name = "Auto Claim Random Reward",
        CurrentValue = false,
        Flag = "Toggle9", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.claimRandomReward = Value
            claimRandomReward()
        end,
    })

    local autoClaimRankRewardToggle = RewardsTab:CreateToggle({
        Name = "Auto Claim Rank Reward",
        CurrentValue = false,
        Flag = "Toggle10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.claimRankReward = Value
            claimRankReward()
        end,
    })

    local autoClaimDailyRewardToggle = RewardsTab:CreateToggle({
        Name = "Auto Claim Daily Reward",
        CurrentValue = false,
        Flag = "Toggle11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.claimDailyReward = Value
            claimDailyReward()
        end,
    })

    local autoUseTripleTapToggle = BoostTab:CreateToggle({
        Name = "Auto Use Triple Tap",
        CurrentValue = false,
        Flag = "Toggle12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.tripleTap = Value
            UseTripleTap()
        end,
    })

    local autoUseDoubleLuckToggle = BoostTab:CreateToggle({
        Name = "Auto Use Double Luck",
        CurrentValue = false,
        Flag = "Toggle13", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.doubleLuckBoost = Value
            UseDoubleLuckBoost()
        end,
    })

    local autoUseTripleLuckToggle = BoostTab:CreateToggle({
        Name = "Auto Use Triple Luck",
        CurrentValue = false,
        Flag = "Toggle14", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.tripleLuckBoost = Value
            UseTripleLuckBoost()
        end,
    })

    local autoFarmBossFightToggle = MiscTab:CreateToggle({
        Name = "Auto Farm Boss Fight",
        CurrentValue = false,
        Flag = "Toggle15", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoBoss = Value
            autoBoss()
        end,
    })

    -- Events Toggles

    local autoBuyHalloweenEggToggle = EventTab:CreateToggle({
        Name = "Auto Buy Halloween Egg",
        CurrentValue = false,
        Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoHalloweenEgg = Value
            autoHalloweenEgg(selectedEgg)
        end,
    })

    local autoBuyEventEggToggle = EventTab:CreateToggle({
        Name = "Auto Buy Event Egg",
        CurrentValue = false,
        Flag = "Toggle6", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.eventEgg = Value
            autoEventEgg()
        end,
    })

    local autoBuyEventTwoEggToggle = EventTab:CreateToggle({
        Name = "Auto Buy Event Two Egg",
        CurrentValue = false,
        Flag = "Toggle7", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoEventTwoEgg = Value
            autoEventTwoEgg()
        end,
    })

    -- Buttons

    local unlockAllPortalsButton = MiscTab:CreateButton({
		Name = "Unlock All Portals!",
		Callback = function()
			print("Unlock all portals button pressed")
            unlockPortals()
		end,
	})

    local redeemAllKnownCodesButton = MiscTab:CreateButton({
		Name = "Redeem all known codes!",
		Callback = function()
			print("All codes have been redeemed!")
            redeemAllCodes()
		end,
	})

    local spawnTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Spawn!",
		Callback = function()
			spawnTP()
		end,
	})

    local forestTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Forest!",
		Callback = function()
			forestTP()
		end,
	})

    local flowerTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Flower!",
		Callback = function()
			flowerTP()
		end,
	})

    local swampTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Swamp!",
		Callback = function()
			swampTP()
		end,
	})

    local snowTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Snow!",
		Callback = function()
			snowTP()
		end,
	})

    local desertTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Desert!",
		Callback = function()
			desertTP()
		end,
	})

    local deathTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Death!",
		Callback = function()
			deathTP()
		end,
	})

    local beachTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Beach!",
		Callback = function()
			beachTP()
		end,
	})

    local minesTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Mines!",
		Callback = function()
			minesTP()
		end,
	})

    local cloudsTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport to Clouds!",
		Callback = function()
			cloudsTP()
		end,
	})

    local coralTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Coral!",
		Callback = function()
			coralTP()
		end,
	})

    local darkheartTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Darkheart!",
		Callback = function()
			darkheartTP()
		end,
	})

    local flamelandsTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Flamelands!",
		Callback = function()
			flamelandsTP()
		end,
	})

    local  moltenTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Molten!",
		Callback = function()
            moltenTP()
		end,
	})

    local blueMagmaTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Blue Magma!",
		Callback = function()
			blueMagmaTP()
		end,
	})

    local purpleMagmaTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Purple Magma!",
		Callback = function()
			purpleMagmaTP()
		end,
	})

    local yellowMagmaTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Yellow Magma!",
		Callback = function()
			yellowMagmaTP()
		end,
	})

    local redMagmaTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Red Magma!",
		Callback = function()
			redMagmaTP()
		end,
	})

    local fantasyTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Fantasy!",
		Callback = function()
			fantasyTP()
		end,
	})

    local mysticMireTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Mystic!",
		Callback = function()
			mysticMireTP()
		end,
	})

    local castleTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Castle!",
		Callback = function()
			castleTP()
		end,
	})

    local festivalTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Festival!",
		Callback = function()
			festivalTP()
		end,
	})

    local japaneseTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Japanese!",
		Callback = function()
			japaneseTP()
		end,
	})

    local spaceTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Space!",
		Callback = function()
			spaceTP()
		end,
	})

    local frostSpaceTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Frost Space!",
		Callback = function()
			frostSpaceTP()
		end,
	})

    local toxicSpaceTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Darkheart!",
		Callback = function()
			toxicSpaceTP()
		end,
	})

    local asteroidSpaceTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Asteroid Space!",
		Callback = function()
			asteroidSpaceTP()
		end,
	})

    local scrapyardSpaceTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Scrapyard Space!",
		Callback = function()
			scrapyardSpaceTP()
		end,
	})

    local bloodSpaceTeleportButton = TeleportTab:CreateButton({
		Name = "Teleport To Blood Space!",
		Callback = function()
			bloodSpaceTP()
		end,
	})

    -- Functions

    function autoTap()
        while _G.autoTap == true do
            local args = {
                [1] = 1}
            game:GetService("ReplicatedStorage").Events.Tap:FireServer(unpack(args))            
            task.wait()
        end
    end

    function autoRebirth(rebirthAmount)
        while _G.autoRebirth == true do
            local args = {
                [1] = rebirthAmount}
            game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
            task.wait()
        end
    end

    function autoEgg(selectedEgg)
        spawn(function()
            while wait() do
                if not _G.autoEgg then break end
                local args = {
                    [1] = {},
                    [2] = selectedEgg,
                    [3] = 1}
                game:GetService("ReplicatedStorage").Events.HatchEgg:InvokeServer(unpack(args))
                task.wait()
            end
        end)
    end

    function storageUpgrade()
        spawn(function()
            while wait(2) do
                local args = {
                    [1] = "storageUpgrade"}
                game:GetService("ReplicatedStorage").Events.Upgrade:FireServer(unpack(args))
            end
        end)
    end

    function rebirthUpgrade()
        spawn(function()
            while wait(2) do
                local args = {
                    [1] = "rebirthUpgrades"}
                game:GetService("ReplicatedStorage").Events.Upgrade:FireServer(unpack(args))
            end
        end)
    end

    function jumpUpgrade()
        spawn(function()
            while wait(2) do
                local args = {
                    [1] = "jumps"}
                game:GetService("ReplicatedStorage").Events.Upgrade:FireServer(unpack(args))
            end
        end)
    end

    function gemUpgrade()
        spawn(function()
            while wait(2) do
                local args = {
                    [1] = "gemMultiplierUpgrade"}
                game:GetService("ReplicatedStorage").Events.Upgrade:FireServer(unpack(args))
            end
        end)
    end

    function claimRandomReward()
        spawn(function()
            while wait(180) do
                game:GetService("ReplicatedStorage").Events.ClaimRandomReward:FireServer()
            end
        end)
    end

    function claimRankReward()
        spawn(function()
            while wait(180) do
                game:GetService("ReplicatedStorage").Events.ClaimRankReward:FireServer()
            end
        end)
    end

    function claimDailyReward()
        spawn(function()
            while wait(180) do
                game:GetService("ReplicatedStorage").Events.OpenDailyReward:InvokeServer()
            end
        end)
    end

    function UseTripleTap()
        spawn(function()
            while wait(900) do
                local args = {
                    [1] = "tripleTaps"}
                game:GetService("ReplicatedStorage").Events.UseBoost:FireServer(unpack(args))
            end
        end)
    end

    function UseDoubleLuckBoost()
        spawn(function()
            while wait(900) do
                local args = {
                    [1] = "doubleLuck"}
                game:GetService("ReplicatedStorage").Events.UseBoost:FireServer(unpack(args))
            end
        end)
    end

    function UseTripleLuckBoost()
        spawn(function()
            while wait(900) do
                local args = {
                    [1] = "tripleLuck"}
                game:GetService("ReplicatedStorage").Events.UseBoost:FireServer(unpack(args))
            end
        end)
    end

    function autoBoss()
        while _G.autoBoss == true do
            game.ReplicatedStorage.Events.StartBossFight:FireServer()
            wait(0.5)
            local args = {
                [1] = workspace["Magma Boss"]}
            game:GetService("ReplicatedStorage").Events.Fire:FireServer(unpack(args))
            wait(5)
        end
    end

    function unlockPortals()
        forestTP()
        wait(4)
        flowerTP()
        wait(4)
        swampTP()
        wait(4)
        snowTP()
        wait(4)
        desertTP()
        wait(4)
        deathTP()
        wait(4)
        beachTP()
        wait(4)
        minesTP()
        wait(4)
        cloudsTP()
        wait(4)
        coralTP()
        wait(4)
        darkheartTP()
        wait(4)
        flamelandsTP()
        wait(4)
        moltenTP()
        wait(4)
        blueMagmaTP()
        wait(4)
        purpleMagmaTP()
        wait(4)
        yellowMagmaTP()
        wait(4)
        redMagmaTP()
        wait(4)
        fantasyTP()
        wait(4)
        mysticMireTP()
        wait(4)
        castleTP()
        wait(4)
        candyTP()
        wait(4)
        festivalTP()
        wait(4)
        japaneseTP()
        wait(4)
        spaceTP()
        wait(4)
        frostSpaceTP()
        wait(4)
        toxicSpaceTP()
        wait(4)
        asteroidSpaceTP()
        wait(4)
        scrapyardSpaceTP()
        wait(4)
        bloodSpaceTP()
        end

        function spawnTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-292.965424, 23.2814751, -423.599396, 0.087131694, 0, -0.996196806, 0, 1, 0, 0.996196806, 0, 0.087131694))
        end

        function forestTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-163.984467, 987.596497, -403.339417, 1, 0, 0, 0, 1, 0, 0, 0, 1))
        end

        function flowerTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-179.51564, 1524.63098, -682.498718, -1, 0, -0, -0, 1, -0, -0, 0, -1))
        end

        function swampTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-264.358887, 2123.06299, -694.661316, -1, 0, -0, -0, 1, -0, -0, 0, -1))
        end

        function snowTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-201.771973, 2944.48169, -470.408752, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end

        function desertTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-166.285156, 4235.38916, -779.153137, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end

        function deathTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-276.201263, 5425.62158, -480.287781, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end

        function beachTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-140.345093, 6881.63086, -495.682129, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end

        function minesTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-243.258667, 8376.5166, -483.889771, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end

        function cloudsTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-253.303482, 11262.8818, -237.888596, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end

        function coralTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-511.021118, 13812.0322, -543.241821, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function darkheartTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-408.69751, 17180.1387, -552.046448, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end
    
        function flamelandsTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1137.61401, 170.300522, -2859.72534, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function moltenTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1280.59583, 2193.82812, -2885.14429, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end
    
        function blueMagmaTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1401.12939, 5240.41943, -2953.91968, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end
    
        function purpleMagmaTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1319.70276, 7662.0249, -2958.05762, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end
    
        function yellowMagmaTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1403.54407, 10404.0977, -2903.13843, -0.707131207, 0, 0.707082391, 0, 1.00000012, 0, -0.707082391, 0, -0.707131207))
        end
    
        function redMagmaTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1426.21277, 13353.7031, -2900.90088, -0.707131207, 0, 0.707082391, 0, 1.00000012, 0, -0.707082391, 0, -0.707131207))
        end
    
        function fantasyTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1415.12451, 169.644089, -5604.4707, 0, 0, 1, 0, 1, 0, -1, 0, 0))
        end
    
        function mysticMireTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1205.41235, 2037.73022, -5585.4043, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function castleTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1216.91406, 5124.03027, -5632.3999, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function candyTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1179.67749, 8660.72852, -5587.80518, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function festivalTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1227.37744, 12284.5283, -5571.9043, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function japaneseTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1189.67773, 16327.543, -5569.50635, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function spaceTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1172.01929, 147.044098, -7965.72852, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function frostSpaceTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1289.57776, 1874.82812, -7965.40625, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function toxicSpaceTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1285.47778, 4960.92285, -7961.20605, 0, 0, -1, 0, 1, -0, 1, 0, -0))
       end
    
        function asteroidSpaceTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1347.32776, 9598.83594, -7961.65625, 0, 0, -1, 0, 1, -0, 1, 0, -0))
        end
    
        function scrapyardSpaceTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(1304.94995, 13605.2275, -8097.60742, 0.707131207, 0, -0.707082391, 0, 1.00000012, 0, 0.707082391, 0, 0.707131207))
        end

        function bloodSpaceTP()
        local args = {
            [1] = CFrame.new(1332.615478515625, 18718.4453125, -8038.8974609375) * CFrame.Angles(-0, -0.7853636741638184, -0)}
        game:GetService("ReplicatedStorage").Events.Teleport:FireServer(unpack(args))
        end
    
        function halloweenTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-3072.79272, 147.144028, -2817.2522, 0.707131207, 0, -0.707082391, 0, 1.00000012, 0, 0.707082391, 0, 0.707131207))
        end
    
        function spookyTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-2956.04224, 1632.89978, -3018.43945, -1, 0, -0, -0, 1, -0, -0, 0, -1))
        end
    
        function nightmareTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-2950.5354, 4147.56885, -2816.15527, 0.000374495226, -0.027767064, 0.999614358, -9.09494702e-13, 0.999614418, 0.0277670659, -0.99999994, -1.03986349e-05, 0.000374350813))
        end
    
        function pumpkinTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-2974.8916, 8090.76074, -3017.06055, -1, 0, -0, -0, 1, -0, -0, 0, -1))
        end
    
        function ghoulTP()
        game.ReplicatedStorage.Events.Teleport:FireServer(CFrame.new(-2972.29321, 11650.7031, -3017.96118, -1, 0, -0, -0, 1, -0, -0, 0, -1))
        end

        function redeemAllCodes()
            local args = {[1] = "upd15"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "space"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "50mvisits"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "spooky"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "50m"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "upd12"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "45m"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "update11ty"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "40m"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "fantasy"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "35m"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "30m"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "secret"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "update4"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "update3"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "update2"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "update1"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "release"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "testing"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
            wait(2)
            local args = {[1] = "UPD18"}game:GetService("ReplicatedStorage").Events.ClaimCode:FireServer(unpack(args))
        end

    -- Event Functions

    function autoHalloweenTap()
        while _G.autoHalloweenTap == true do
            local args = {
                [1] = 5}
            game:GetService("ReplicatedStorage").Events.Tap:FireServer(unpack(args))            
            task.wait()
        end
    end

    function autoHalloweenEgg(selectedEgg)
        spawn(function()
            while wait() do
                if not _G.autoHalloweenEgg then break end
                local args = {
                    [1] = {},
                    [2] = selectedEgg,
                    [3] = 1}
                game:GetService("ReplicatedStorage").Events.HatchEgg:InvokeServer(unpack(args))
                task.wait()
            end
        end)
    end

    function autoEventEgg()
        spawn(function()
            while wait() do
                if not _G.eventEgg then break end
                local args = {
                    [1] = {},
                    [2] = "60M Egg",
                    [3] = 1}
                game:GetService("ReplicatedStorage").Events.HatchEgg:InvokeServer(unpack(args))
            end
        end)
    end

    function autoEventTwoEgg()
        spawn(function()
            while wait() do
                if not _G.autoEventTwoEgg then break end
                local args = {
                    [1] = {},
                    [2] = "65M Egg",
                    [3] = 1}
                game:GetService("ReplicatedStorage").Events.HatchEgg:InvokeServer(unpack(args))
            end
        end)
    end
