local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Window = Rayfield:CreateWindow({
    Name = "DragonHub",
    LoadingTitle = "DragonHub",
    LoadingSubtitle = "By Toothless The Night Fury#9772",
    ConfigurationSaving = {
        Enabled = true,
        FileName = "DragonHub",
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
	Title = "DragonHub",
	Subtitle = "Key System",
	Note = "Join the discord = https://discord.gg/KwyPcJQ9ma",
	Key = "QJsy51gIUcr859Pe2V7bd0xSzW3C64H1Hk29FZbYOr61FMx04ZUrZpwPI6q7213Nqz5a4Ir2x6D1ahjNwy0XZBzW6GSfwC97yh8"
}
})

    -- Values

    _G.auto = true
    _G.autoCollect = true
    _G.autoRebirth = true

    -- Code Value

    _G.likeCode = true

	-- Tabs

    local MoneyTab = Window:CreateTab("Inf Money")

    local RebirthTab = Window:CreateTab("Rebirth Menu")

    local PlayerTab = Window:CreateTab("Player Menu")

    local MiscTab = Window:CreateTab("Misc Menu")

	-- Toggles

    local MoneyToggle = MoneyTab:CreateToggle({
        Name = "Get Inf Money",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.auto = Value
            autoInfMoney()
        end,
    })

    local autoCollectToggle = MiscTab:CreateToggle({
        Name = "Auto Collect",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoCollect = Value
            autoCollect()
        end,
    })

    local autoRebirthToggle = RebirthTab:CreateToggle({
        Name = "Auto Rebirth",
        CurrentValue = false,
        Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            _G.autoRebirth = Value
            autoRebirth()
        end,
    })

    -- Buttons

    local likeCodeButton = MiscTab:CreateButton({
		Name = "Redeem Like Code!",
		Callback = function()
			likeCode()
		end,
	})

	-- Siders

	local SpeedSlider = PlayerTab:CreateSlider({
		Name = "Change Walkspeed",
		Range = {16, 1002},
		Increment = 1,
		Suffix = "walkspeed",
		CurrentValue = 16,
		Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
		end,
	})

    local JumpSlider = PlayerTab:CreateSlider({
		Name = "Change Jumppower",
		Range = {50, 750},
		Increment = 1,
		Suffix = "jumppower",
		CurrentValue = 50,
		Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
		end,
	})

-- Function

    function autoInfMoney()
        while _G.auto == true do
            game:GetService("ReplicatedStorage").RE.Robbery:FireServer()
            task.wait()
        end
    end

    function autoRebirth()
        while _G.autoRebirth == true do
            game:GetService("ReplicatedStorage").RE.Rebirth:FireServer()
            task.wait()
        end
    end

    function likeCode()
        while _G.likeCode == true do
            local args = {
                [1] = "like"}
            game:GetService("ReplicatedStorage").Code:InvokeServer(unpack(args))
            wait(10000000000)
        end
    end

    function autoCollect()
        while _G.autoCollect == true do
            game:GetService("ReplicatedStorage").RE.emptyCollector:InvokeServer()
            wait(5)
        end
    end
